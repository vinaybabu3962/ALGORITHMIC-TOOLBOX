package wt.model;
import java.util.*;
public class GreedyKnapsackModel {
	public double capacity;
	public int n;
	public double [] val;
	public double [] wt;
	public double [] sel;
	public double totalValue = 0d;
	static class ItemValue {
		Double cost;
		double wt, val, ind;
		public ItemValue(double wt, double val, double ind)
		{

			this.wt = wt;
			this.val = val;
			this.ind = ind;
			cost = new Double(val / wt);
		}
	}
	public GreedyKnapsackModel(String count, String profits, String weights, String weight) {
		this.n=Integer.parseInt(count);
		StringTokenizer s1=new StringTokenizer(profits,",");
		StringTokenizer s2=new StringTokenizer(weights,",");
		this.capacity=Double.parseDouble(weight);
		int i=0;
		this.wt=new double[(int)this.n];
		this.val=new double[(int)this.n];
		while (s1.hasMoreTokens()) {
			this.val[i]=Double.parseDouble(s1.nextToken());
			this.wt[i]=Double.parseDouble(s2.nextToken());
		}
		ItemValue[] iVal = new ItemValue[wt.length];
		this.sel=new double[wt.length];
		for (i = 0; i < wt.length; i++) {
			iVal[i] = new ItemValue(this.wt[i], this.val[i], i);
			this.sel[i]=0d;
		}

		// sorting items by value;
		Arrays.sort(iVal, new Comparator<ItemValue>() {
		@Override
		public int compare(ItemValue o1, ItemValue o2)
		{
		return o2.cost.compareTo(o1.cost);
		}
		});

		

		for (ItemValue it : iVal) {

		int curWt = (int)it.wt;
		int curVal = (int)it.val;

		if (this.capacity - curWt >= 0) {
		// this weight can be picked while
		this.capacity = this.capacity - curWt;
		this.totalValue += curVal;
		this.sel[(int)it.ind]=(double)1d;

		}
		else {
		// item cant be picked whole
		double fraction
		= ((double)this.capacity / (double)curWt);
		this.sel[(int)it.ind]=(double)fraction;
		this.totalValue += (curVal * fraction);
		this.capacity= (int)(this.capacity - (curWt * fraction));

		break;
		}
		}

		
		for( i=0;i<this.n;i++){ System.out.print(sel[i]+" " );
		 
		  } System.out.println();
		 


		 System.out.println("Maximum value we can obtain = " + totalValue);
		
		
	}

	
}
